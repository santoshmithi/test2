public static class UltraFastDataReader
{
    private static readonly ConcurrentDictionary<(Type, string), int> _ordinalCache = new();
    
    public static int GetOrdinalBlazingFast(this DbDataReader reader, string columnName)
    {
        var key = (reader.GetType(), columnName);
        
        // Check cache first
        if (_ordinalCache.TryGetValue(key, out var cachedOrdinal))
            return cachedOrdinal;
        
        // Fast-path for small result sets
        if (reader.FieldCount <= 20)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                if (string.Equals(reader.GetName(i), columnName, StringComparison.OrdinalIgnoreCase))
                {
                    _ordinalCache[key] = i;
                    return i;
                }
            }
            return -1; // Not found
        }
        
        // Fallback to native GetOrdinal with caching
        try
        {
            var ordinal = reader.GetOrdinal(columnName);
            _ordinalCache[key] = ordinal;
            return ordinal;
        }
        catch (IndexOutOfRangeException)
        {
            return -1;
        }
    }
}

// Usage:
var ordinal = reader.GetOrdinalBlazingFast("CompositionExposure");
if (ordinal != -1 && !reader.IsDBNull(ordinal))
{
    // Process column
}
