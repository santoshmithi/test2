// In your Query.cs file
public class Query
{
    [UsePaging]
    [UseProjection]
    [UseFiltering]
    [UseSorting]
    public async Task<IEnumerable<BenchmarkQl>> GetLatestBenchmarks(
        [Service] ExposerService exposerService, // Injected service
        int? first,
        string? after,
        IResolverContext context) // Hot Chocolate context
    {
        // 1. Detect which exposures are requested
        var requestedExposures = new List<string>();
        
        if (ContainsField(context.Selection.SyntaxNode, "countryExposures"))
            requestedExposures.Add("Country");
            
        if (ContainsField(context.Selection.SyntaxNode, "currencyExposures"))
            requestedExposures.Add("Currency");
            
        if (ContainsField(context.Selection.SyntaxNode, "compositionExposures"))
            requestedExposures.Add("Composition");

        // 2. Call the service method
        return await exposerService.GetBenchmarksWithExposures(first, after, requestedExposures);
    }

    private bool ContainsField(ISyntaxNode node, string fieldName)
    {
        return node switch
        {
            FieldNode f when f.Name.Value == fieldName => true,
            SelectionSetNode s => s.Selections.Any(s => ContainsField(s, fieldName)),
            _ => false
        };
    }
}
