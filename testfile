using NUnit.Framework;
using Moq;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using System.Collections.Generic;

[TestFixture]
public class ExposerServiceTests
{
    private Mock<IDbContexProvider> _dbContextProviderMock;
    private Mock<IDatabaseConnectionFactory> _connectionFactoryMock;
    private Mock<IDatabaseConnection> _connectionMock;
    private Mock<IDbCommandWrapper> _commandMock;
    private Mock<IDataReaderWrapper> _readerMock;
    private ExposerService _service;

    [SetUp]
    public void Setup()
    {
        _dbContextProviderMock = new Mock<IDbContexProvider>();
        _connectionFactoryMock = new Mock<IDatabaseConnectionFactory>();
        _connectionMock = new Mock<IDatabaseConnection>();
        _commandMock = new Mock<IDbCommandWrapper>();
        _readerMock = new Mock<IDataReaderWrapper>();

        _connectionFactoryMock.Setup(f => f.CreateConnection(It.IsAny<DbConnection>()))
            .Returns(_connectionMock.Object);

        _connectionMock.Setup(c => c.CreateCommand())
            .Returns(_commandMock.Object);

        _commandMock.Setup(c => c.ExecuteReaderAsync())
            .ReturnsAsync(_readerMock.Object);

        _service = new ExposerService(_dbContextProviderMock.Object, _connectionFactoryMock.Object);
    }

    [Test]
    public async Task GetBenchDetails_ShouldReturnData_WhenCountryFalse()
    {
        // Arrange
        const int testId = 1;
        const bool isCountry = false;
        
        SetupReaderForSuccessScenario(isCountry);

        // Act
        var result = await _service.GetBenchDetails(testId, isCountry);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Count(), Is.EqualTo(1));
        Assert.That(result.First().IndexSymbol, Is.EqualTo("TEST"));
        Assert.That(result.First().CountryExp, Is.Empty);
        
        VerifyCommandSetup(testId);
        VerifyConnectionManagement();
    }

    [Test]
    public async Task GetBenchDetails_ShouldReturnDataWithCountry_WhenCountryTrue()
    {
        // Arrange
        const int testId = 1;
        const bool isCountry = true;
        
        SetupReaderForSuccessScenario(isCountry);
        SetupCountryData();

        // Act
        var result = await _service.GetBenchDetails(testId, isCountry);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.Count(), Is.EqualTo(1));
        Assert.That(result.First().IndexSymbol, Is.EqualTo("TEST"));
        Assert.That(result.First().CountryExp, Is.Not.Empty);
    }

    [Test]
    public async Task GetBenchDetails_ShouldHandleNullValues()
    {
        // Arrange
        const int testId = 1;
        const bool isCountry = true;
        
        SetupReaderForNullScenario();

        // Act
        var result = await _service.GetBenchDetails(testId, isCountry);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result.First().IndexSymbol, Is.Null);
        Assert.That(result.First().CountryExp, Is.Empty);
    }

    [Test]
    public void GetBenchDetails_ShouldThrow_WhenConnectionFails()
    {
        // Arrange
        const int testId = 1;
        const bool isCountry = false;
        
        _connectionMock.Setup(c => c.OpenAsync())
            .ThrowsAsync(new Exception("Connection failed"));

        // Act & Assert
        Assert.ThrowsAsync<Exception>(() => _service.GetBenchDetails(testId, isCountry));
    }

    [Test]
    public async Task GetBenchDetails_ShouldReturnEmpty_WhenNoData()
    {
        // Arrange
        const int testId = 1;
        const bool isCountry = false;
        
        _readerMock.Setup(r => r.ReadAsync()).ReturnsAsync(false);

        // Act
        var result = await _service.GetBenchDetails(testId, isCountry);

        // Assert
        Assert.That(result, Is.Not.Null);
        Assert.That(result, Is.Empty);
    }

    #region Helper Methods

    private void SetupReaderForSuccessScenario(bool isCountry)
    {
        var readSequence = _readerMock.SetupSequence(r => r.ReadAsync());
        readSequence.ReturnsAsync(true); // One row
        readSequence.ReturnsAsync(false); // End of data

        // Setup column ordinals
        _readerMock.Setup(r => r.GetOrdinal("IndexSymbol")).Returns(0);
        if (isCountry)
        {
            _readerMock.Setup(r => r.GetOrdinal("country_exposer")).Returns(1);
        }

        // Setup values
        _readerMock.Setup(r => r.IsDBNull(0)).Returns(false);
        _readerMock.Setup(r => r.GetFieldValue<string>(0)).Returns("TEST");
    }

    private void SetupCountryData()
    {
        _readerMock.Setup(r => r.IsDBNull(1)).Returns(false);
        _readerMock.Setup(r => r.GetFieldValue<string>(1)).Returns("{\"Country\":\"US\"}");
    }

    private void SetupReaderForNullScenario()
    {
        _readerMock.SetupSequence(r => r.ReadAsync())
            .ReturnsAsync(true)  // One row
            .ReturnsAsync(false); // End

        // Setup column ordinals
        _readerMock.Setup(r => r.GetOrdinal("IndexSymbol")).Returns(0);
        _readerMock.Setup(r => r.GetOrdinal("country_exposer")).Returns(1);

        // Setup null values
        _readerMock.Setup(r => r.IsDBNull(0)).Returns(true);
        _readerMock.Setup(r => r.IsDBNull(1)).Returns(true);
    }

    private void VerifyCommandSetup(int expectedId)
    {
        _commandMock.VerifySet(c => c.CommandType = CommandType.StoredProcedure);
        _commandMock.VerifySet(c => c.CommandText = "prcname");
        _commandMock.Verify(c => c.AddParameter("id", expectedId), Times.Once);
    }

    private void VerifyConnectionManagement()
    {
        _connectionMock.Verify(c => c.OpenAsync(), Times.Once);
        _connectionMock.Verify(c => c.CloseAsync(), Times.Once);
    }

    #endregion
}
