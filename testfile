CREATE OR ALTER PROCEDURE dbo.GetBenchmarksWithDynamicExposures
    @First INT = NULL,
    @After NVARCHAR(50) = NULL,
    @FetchCountry BIT = 0,
    @FetchCurrency BIT = 0,
    @FetchComposition BIT = 0
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Create temp table for benchmarks to improve performance
    CREATE TABLE #LatestBenchmarks (
        IndexSymbol NVARCHAR(50),
        ValueDate DATE,
        IndexCurrency NVARCHAR(10),
        IndexSource NVARCHAR(50),
        MessageGuid UNIQUEIDENTIFIER,
        RowNum INT
    );

    -- Get paginated benchmarks
    WITH BenchmarksRanked AS (
        SELECT 
            b.IndexSymbol,
            b.ValueDate,
            b.IndexCurrency,
            b.IndexSource,
            b.MessageGuid,
            ROW_NUMBER() OVER (PARTITION BY b.IndexSymbol ORDER BY b.ValueDate DESC, b.ExecutedDateTime DESC) AS LatestRow,
            ROW_NUMBER() OVER (ORDER BY b.IndexSymbol) AS RowNum
        FROM Benchmarks b
        WHERE (@After IS NULL OR b.IndexSymbol > @After)
    )
    INSERT INTO #LatestBenchmarks
    SELECT 
        IndexSymbol, ValueDate, IndexCurrency, IndexSource, MessageGuid, RowNum
    FROM BenchmarksRanked
    WHERE LatestRow = 1 AND (@First IS NULL OR RowNum <= @First);

    -- Create index on temp table
    CREATE CLUSTERED INDEX IX_Temp_LatestBenchmarks ON #LatestBenchmarks(IndexSymbol, ValueDate);

    -- Main result query
    SELECT 
        b.IndexSymbol,
        b.ValueDate,
        b.IndexCurrency,
        b.IndexSource,
        b.MessageGuid,
        -- Country exposure data as JSON array
        CASE WHEN @FetchCountry = 1 THEN 
            (SELECT 
                wa.Country AS country,
                wa.Weight AS weight,
                wa.ExtractedDateTime AS extractedDateTime,
                wa.ImportDate AS importDate,
                b.IndexSymbol AS parentSymbol,
                b.ValueDate AS valueDate,
                b.MessageGuid AS messageGuid
             FROM WeightAllocation wa
             WHERE wa.ParentSymbol = b.IndexSymbol 
             AND wa.ValueDate = b.ValueDate 
             AND wa.Country IS NOT NULL
             ORDER BY wa.Weight DESC
             FOR JSON PATH)
        ELSE NULL END AS CountryExposure,
        -- Currency exposure data as JSON array
        CASE WHEN @FetchCurrency = 1 THEN 
            (SELECT 
                wa.Currency AS currency,
                wa.Weight AS weight,
                wa.ExtractedDateTime AS extractedDateTime,
                wa.ImportDate AS importDate,
                b.IndexSymbol AS parentSymbol,
                b.ValueDate AS valueDate,
                b.MessageGuid AS messageGuid
             FROM WeightAllocation wa
             WHERE wa.ParentSymbol = b.IndexSymbol 
             AND wa.ValueDate = b.ValueDate 
             AND wa.Currency IS NOT NULL
             ORDER BY wa.Weight DESC
             FOR JSON PATH)
        ELSE NULL END AS CurrencyExposure,
        -- Composition data as JSON array
        CASE WHEN @FetchComposition = 1 THEN 
            (SELECT 
                c.Sector AS sector,
                c.Industry AS industry,
                c.ExtractedDateTime AS extractedDateTime,
                b.IndexSymbol AS parentSymbol,
                b.ValueDate AS valueDate,
                b.MessageGuid AS messageGuid
             FROM Composition c
             WHERE c.ParentSymbol = b.IndexSymbol 
             AND c.ValueDate = b.ValueDate
             FOR JSON PATH)
        ELSE NULL END AS CompositionExposure
    FROM #LatestBenchmarks b
    ORDER BY b.IndexSymbol;

    DROP TABLE #LatestBenchmarks;
END
==================================================

public class ExposerService
{
    private readonly DbContext _dbContext;
    private static readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true
    };
    
    public ExposerService(DbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<IEnumerable<BenchmarkQl>> GetBenchmarksWithExposures(
        int? first, 
        string? after,
        bool fetchCountry,
        bool fetchCurrency,
        bool fetchComposition)
    {
        await using var connection = _dbContext.Database.GetDbConnection();
        await connection.OpenAsync();
        
        await using var command = connection.CreateCommand();
        command.CommandText = "dbo.GetBenchmarksWithDynamicExposures";
        command.CommandType = CommandType.StoredProcedure;
        
        command.Parameters.Add(new SqlParameter("@First", first ?? (object)DBNull.Value));
        command.Parameters.Add(new SqlParameter("@After", after ?? (object)DBNull.Value));
        command.Parameters.Add(new SqlParameter("@FetchCountry", fetchCountry));
        command.Parameters.Add(new SqlParameter("@FetchCurrency", fetchCurrency));
        command.Parameters.Add(new SqlParameter("@FetchComposition", fetchComposition));

        await using var reader = await command.ExecuteReaderAsync();

        var benchmarks = new List<BenchmarkQl>();
        
        while (await reader.ReadAsync())
        {
            var benchmark = new BenchmarkQl
            {
                IndexSymbol = reader.GetString(0),
                ValueDate = reader.GetDateTime(1),
                IndexCurrency = reader.GetString(2),
                IndexSource = reader.GetString(3),
                MessageGuid = reader.GetGuid(4),
                CountryExposures = fetchCountry ? new List<CountryExposerQl>() : null,
                CurrencyExposures = fetchCurrency ? new List<CurrencyExposerQl>() : null,
                CompositionExposures = fetchComposition ? new List<CompositionExposerQl>() : null
            };

            // Process Country Exposure
            if (fetchCountry && !reader.IsDBNull(5))
            {
                benchmark.CountryExposures = JsonSerializer.Deserialize<List<CountryExposerQl>>(
                    reader.GetString(5), _jsonOptions);
            }

            // Process Currency Exposure
            if (fetchCurrency && !reader.IsDBNull(6))
            {
                benchmark.CurrencyExposures = JsonSerializer.Deserialize<List<CurrencyExposerQl>>(
                    reader.GetString(6), _jsonOptions);
            }

            // Process Composition
            if (fetchComposition && !reader.IsDBNull(7))
            {
                benchmark.CompositionExposures = JsonSerializer.Deserialize<List<CompositionExposerQl>>(
                    reader.GetString(7), _jsonOptions);
            }

            benchmarks.Add(benchmark);
        }

        return benchmarks;
    }
}
