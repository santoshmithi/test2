private async Task<TResult> TryApiCallAsync<TResult>(
    Func<CancellationToken, Task<(TResult Result, Exception Error)>> codeToTry, 
    CancellationToken cancellationToken)
{
    const int maxRetryAttempts = 5;
    var delay = TimeSpan.FromSeconds(1); // Initial delay
    const bool exponentialBackoff = true;
    Exception lastException = null;

    for (var attempt = 0; attempt < maxRetryAttempts; attempt++)
    {
        var (result, error) = await codeToTry(cancellationToken);
        
        if (error == null)
        {
            return result;
        }

        lastException = error;
        Log.LogInformation($"Error in attempt {attempt + 1}: {error.Message}");
        
        if (attempt < maxRetryAttempts - 1) // Only delay if we're trying again
        {
            await Task.Delay(delay, cancellationToken);
            if (exponentialBackoff)
            {
                delay = TimeSpan.FromTicks(delay.Ticks * 2); // Double the delay
            }
        }
    }

    // After all retries failed, throw the last exception
    throw new SynchronisationException(
        $"The operation failed after {maxRetryAttempts} attempts. Last error: {lastException?.Message}", 
        lastException);
}

// Modified CountAsync to return exceptions instead of throwing
public async Task<(int Result, Exception Error)> CountAsync(CancellationToken cancellation, ExecutionContext context)
{
    try
    {
        var uri = context.BuildRequestUri(Uri, true);
        Log.RequestingResource(Resource, uri);

        var result = await Client.GetAsync(uri);

        if (result.IsSuccessStatusCode)
        {
            Log.ReceivedSuccessResponse(Resource, uri, (int)result.StatusCode);
            var countString = await result.Content.ReadAsStringAsync();

            if (int.TryParse(countString, out var count))
            {
                Log.ReceivedCountResponse(Resource, uri, count);
                return (count, null);
            }
            
            return (0, new SynchronisationException($"Unable to read a count value from {countString}"));
        }
        else
        {
            var error = await result.Content.ReadAsStringAsync();
            return (0, new SynchronisationException($"Responded with {result.StatusCode} and message {error}"));
        }
    }
    catch (Exception ex)
    {
        return (0, ex); // Return any unexpected exceptions
    }
}

// Modified calling code
var (totalRecords, error) = await TryApiCallAsync(
    async token => await request.CountAsync(token, context), 
    cancellationToken);

if (error != null)
{
    // Handle the error (it will already have been logged by TryApiCallAsync)
    // You can choose to log it differently here if needed
}
