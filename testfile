[GraphQLName("Benchmark")]
public class BenchmarkQl
{
    public string IndexSymbol { get; set; }
    public DateTime ValueDate { get; set; }
    public string IndexCurrency { get; set; }
    public string IndexSource { get; set; }
    public Guid MessageGuid { get; set; }

    // Initialize collections in the constructor
    public BenchmarkQl()
    {
        CountryExposures = new List<CountryExposerQl>();
        CurrencyExposures = new List<CurrencyExposerQl>();
        CompositionExposures = new List<CompositionExposerQl>();
    }

    // Proper properties with get/set
    public List<CountryExposerQl> CountryExposures { get; set; }
    public List<CurrencyExposerQl> CurrencyExposures { get; set; }
    public List<CompositionExposerQl> CompositionExposures { get; set; }
}

==============
public async Task<IEnumerable<BenchmarkQl>> GetBenchmarksWithExposures(
    int? first, 
    string? after,
    List<string> requestedExposures)
{
    // ... existing code ...

    while (await reader.ReadAsync())
    {
        var benchmark = new BenchmarkQl // Collections already initialized in constructor
        {
            IndexSymbol = reader.GetString(0),
            ValueDate = reader.GetDateTime(1),
            IndexCurrency = reader.GetString(2),
            IndexSource = reader.GetString(3),
            MessageGuid = reader.GetGuid(4)
            // Collections are already initialized
        };

        // Add exposures as before
        if (requestedExposures.Contains("Country") && !reader.IsDBNull(5))
        {
            benchmark.CountryExposures.Add(new CountryExposerQl
            {
                // ... populate fields ...
            });
        }

        // ... rest of the code ...
    }

    // ... rest of the code ...
}
