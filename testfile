using NUnit.Framework;
using Moq;
using System.Data;
using System.Threading.Tasks;
using System.Collections.Generic;

[TestFixture]
public class ExposerServiceTests
{
    private Mock<IDbContexProvider> _dbContextProviderMock;
    private Mock<IDatabaseConnectionFactory> _connectionFactoryMock;
    private Mock<IDatabaseConnection> _connectionMock;
    private Mock<IDbCommandWrapper> _commandMock;
    private Mock<IDataReaderWrapper> _readerMock;
    private ExposerService _service;

    [SetUp]
    public void Setup()
    {
        _dbContextProviderMock = new Mock<IDbContexProvider>();
        _connectionFactoryMock = new Mock<IDatabaseConnectionFactory>();
        _connectionMock = new Mock<IDatabaseConnection>();
        _commandMock = new Mock<IDbCommandWrapper>();
        _readerMock = new Mock<IDataReaderWrapper>();

        _connectionFactoryMock.Setup(f => f.CreateConnection(It.IsAny<DbConnection>()))
            .Returns(_connectionMock.Object);

        _connectionMock.Setup(c => c.CreateCommand())
            .Returns(_commandMock.Object);

        _commandMock.Setup(c => c.ExecuteReaderAsync())
            .ReturnsAsync(_readerMock.Object);

        _service = new ExposerService(_dbContextProviderMock.Object, _connectionFactoryMock.Object);
    }

    [Test]
    public async Task GetBenchDetails_ShouldFillCountryData_WhenIsCountryTrue()
    {
        // Arrange
        SetupReaderWithData(hasCountry: true, hasCurrency: false, hasComposition: false);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: true, isCurrency: false, isComposition: false);

        // Assert
        Assert.That(result.First().CountryExp, Is.Not.Empty);
        Assert.That(result.First().CurrencyExp, Is.Empty);
    }

    [Test]
    public async Task GetBenchDetails_ShouldFillCurrencyData_WhenIsCurrencyTrue()
    {
        // Arrange
        SetupReaderWithData(hasCountry: false, hasCurrency: true, hasComposition: false);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: false, isCurrency: true, isComposition: false);

        // Assert
        Assert.That(result.First().CountryExp, Is.Empty);
        Assert.That(result.First().CurrencyExp, Is.Not.Empty);
    }

    [Test]
    public async Task GetBenchDetails_ShouldFillCompositionData_WhenIsCompositionTrue()
    {
        // Arrange
        SetupReaderWithData(hasCountry: false, hasCurrency: false, hasComposition: true);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: false, isCurrency: false, isComposition: true);

        // Assert
        Assert.That(result.First().CompositionData, Is.Not.Null);
    }

    [Test]
    public async Task GetBenchDetails_ShouldFillAllData_WhenAllFlagsTrue()
    {
        // Arrange
        SetupReaderWithData(hasCountry: true, hasCurrency: true, hasComposition: true);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: true, isCurrency: true, isComposition: true);

        // Assert
        Assert.That(result.First().CountryExp, Is.Not.Empty);
        Assert.That(result.First().CurrencyExp, Is.Not.Empty);
        Assert.That(result.First().CompositionData, Is.Not.Null);
    }

    [Test]
    public async Task GetBenchDetails_ShouldHandleNullValues_ForAllFields()
    {
        // Arrange
        SetupReaderWithNullData();
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: true, isCurrency: true, isComposition: true);

        // Assert
        Assert.That(result.First().IndexSymbol, Is.Null);
        Assert.That(result.First().CountryExp, Is.Empty);
        Assert.That(result.First().CurrencyExp, Is.Empty);
    }

    [Test]
    public async Task GetBenchDetails_ShouldSkipCountryData_WhenFieldIsNull()
    {
        // Arrange
        SetupReaderWithData(hasCountry: false, hasCurrency: true, hasComposition: true);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: true, isCurrency: true, isComposition: true);

        // Assert
        Assert.That(result.First().CountryExp, Is.Empty);
        Assert.That(result.First().CurrencyExp, Is.Not.Empty);
    }

    [Test]
    public async Task GetBenchDetails_ShouldReturnEmpty_WhenNoData()
    {
        // Arrange
        _readerMock.Setup(r => r.ReadAsync()).ReturnsAsync(false);
        
        // Act
        var result = await _service.GetBenchDetails(1, isCountry: true, isCurrency: true, isComposition: true);

        // Assert
        Assert.That(result, Is.Empty);
    }

    #region Helper Methods

    private void SetupReaderWithData(bool hasCountry, bool hasCurrency, bool hasComposition)
    {
        var readSequence = _readerMock.SetupSequence(r => r.ReadAsync());
        readSequence.ReturnsAsync(true);
        readSequence.ReturnsAsync(false);

        // Common setup
        _readerMock.Setup(r => r.GetOrdinal("IndexSymbol")).Returns(0);
        _readerMock.Setup(r => r.IsDBNull(0)).Returns(false);
        _readerMock.Setup(r => r.GetFieldValue<string>(0)).Returns("TEST");

        // Country setup
        if (hasCountry)
        {
            _readerMock.Setup(r => r.GetOrdinal("country_exposer")).Returns(1);
            _readerMock.Setup(r => r.IsDBNull(1)).Returns(false);
            _readerMock.Setup(r => r.GetFieldValue<string>(1)).Returns("{\"Country\":\"US\"}");
        }

        // Currency setup
        if (hasCurrency)
        {
            _readerMock.Setup(r => r.GetOrdinal("currency_exposer")).Returns(2);
            _readerMock.Setup(r => r.IsDBNull(2)).Returns(false);
            _readerMock.Setup(r => r.GetFieldValue<string>(2)).Returns("{\"Currency\":\"USD\"}");
        }

        // Composition setup
        if (hasComposition)
        {
            _readerMock.Setup(r => r.GetOrdinal("composition")).Returns(3);
            _readerMock.Setup(r => r.IsDBNull(3)).Returns(false);
            _readerMock.Setup(r => r.GetFieldValue<string>(3)).Returns("{\"Components\":[]}");
        }
    }

    private void SetupReaderWithNullData()
    {
        _readerMock.SetupSequence(r => r.ReadAsync())
            .ReturnsAsync(true)
            .ReturnsAsync(false);

        _readerMock.Setup(r => r.GetOrdinal("IndexSymbol")).Returns(0);
        _readerMock.Setup(r => r.GetOrdinal("country_exposer")).Returns(1);
        _readerMock.Setup(r => r.GetOrdinal("currency_exposer")).Returns(2);
        _readerMock.Setup(r => r.GetOrdinal("composition")).Returns(3);

        _readerMock.Setup(r => r.IsDBNull(0)).Returns(true);
        _readerMock.Setup(r => r.IsDBNull(1)).Returns(true);
        _readerMock.Setup(r => r.IsDBNull(2)).Returns(true);
        _readerMock.Setup(r => r.IsDBNull(3)).Returns(true);
    }

    #endregion
}
