public async Task<IEnumerable<BenchmarkQl>> GetBenchmarksWithExposures(
    int? first, 
    string? after,
    bool fetchCountry,
    bool fetchCurrency,
    bool fetchComposition)
{
    await using var connection = _dbContext.Database.GetDbConnection();
    await connection.OpenAsync();
    
    await using var command = connection.CreateCommand();
    command.CommandText = "dbo.GetBenchmarksWithDynamicExposures";
    command.CommandType = CommandType.StoredProcedure;
    
    command.Parameters.Add(new SqlParameter("@First", first ?? (object)DBNull.Value));
    command.Parameters.Add(new SqlParameter("@After", after ?? (object)DBNull.Value));
    command.Parameters.Add(new SqlParameter("@FetchCountry", fetchCountry));
    command.Parameters.Add(new SqlParameter("@FetchCurrency", fetchCurrency));
    command.Parameters.Add(new SqlParameter("@FetchComposition", fetchComposition));

    await using var reader = await command.ExecuteReaderAsync();

    var benchmarks = new List<BenchmarkQl>();
    
    while (await reader.ReadAsync())
    {
        var benchmark = new BenchmarkQl
        {
            // Direct column access with GetOrdinal inline
            IndexSymbol = reader.GetString(reader.GetOrdinal("IndexSymbol")),
            ValueDate = reader.GetDateTime(reader.GetOrdinal("ValueDate")),
            IndexCurrency = reader.GetString(reader.GetOrdinal("IndexCurrency")),
            IndexSource = reader.GetString(reader.GetOrdinal("IndexSource")),
            MessageGuid = reader.GetGuid(reader.GetOrdinal("MessageGuid")),
            CountryExposures = fetchCountry ? new List<CountryExposerQl>() : null,
            CurrencyExposures = fetchCurrency ? new List<CurrencyExposerQl>() : null,
            CompositionExposures = fetchComposition ? new List<CompositionExposerQl>() : null
        };

        // Process Country Exposure
        if (fetchCountry)
        {
            var ordinal = reader.GetOrdinal("CountryExposure");
            if (!reader.IsDBNull(ordinal))
            {
                benchmark.CountryExposures = JsonSerializer.Deserialize<List<CountryExposerQl>>(
                    reader.GetString(ordinal), _jsonOptions);
            }
        }

        // Process Currency Exposure
        if (fetchCurrency)
        {
            var ordinal = reader.GetOrdinal("CurrencyExposure");
            if (!reader.IsDBNull(ordinal))
            {
                benchmark.CurrencyExposures = JsonSerializer.Deserialize<List<CurrencyExposerQl>>(
                    reader.GetString(ordinal), _jsonOptions);
            }
        }

        // Process Composition
        if (fetchComposition)
        {
            var ordinal = reader.GetOrdinal("CompositionExposure");
            if (!reader.IsDBNull(ordinal))
            {
                benchmark.CompositionExposures = JsonSerializer.Deserialize<List<CompositionExposerQl>>(
                    reader.GetString(ordinal), _jsonOptions);
            }
        }

        benchmarks.Add(benchmark);
    }

    return benchmarks;
}
