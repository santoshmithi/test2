using NUnit.Framework;
using Moq;
using System.Data;
using System.Data.Common;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System;

[TestFixture]
public class WrapperTests
{
    #region DbContexProvider Tests

    [Test]
    public void DbContexProvider_ShouldReturnDbContext()
    {
        // Arrange
        var mockDbContext = new Mock<benchDBcontex>();
        var provider = new DbContexProvider(mockDbContext.Object);

        // Act
        var result = provider.GetBenchDBcontex();

        // Assert
        Assert.That(result, Is.EqualTo(mockDbContext.Object));
    }

    [Test]
    public void DbContexProvider_ShouldReturnDbConnection()
    {
        // Arrange
        var mockConnection = new Mock<DbConnection>();
        var mockDbContext = new Mock<benchDBcontex>();
        mockDbContext.Setup(d => d.Database.GetDbConnection()).Returns(mockConnection.Object);
        
        var provider = new DbContexProvider(mockDbContext.Object);

        // Act
        var result = provider.GetDbConnection();

        // Assert
        Assert.That(result, Is.EqualTo(mockConnection.Object));
    }

    #endregion

    #region DatabaseConnectionWrapper Tests

    [Test]
    public async Task DatabaseConnectionWrapper_ShouldOpenAndCloseConnection()
    {
        // Arrange
        var mockConnection = new Mock<DbConnection>();
        mockConnection.Setup(c => c.OpenAsync(It.IsAny<CancellationToken>()))
            .Returns(Task.CompletedTask);
        mockConnection.Setup(c => c.CloseAsync())
            .Returns(Task.CompletedTask);
        
        var wrapper = new DatabaseConnectionWrapper(mockConnection.Object);

        // Act
        await wrapper.OpenAsync();
        await wrapper.CloseAsync();

        // Assert
        mockConnection.Verify(c => c.OpenAsync(It.IsAny<CancellationToken>()), Times.Once);
        mockConnection.Verify(c => c.CloseAsync(), Times.Once);
    }

    [Test]
    public void DatabaseConnectionWrapper_CreateCommand_ShouldReturnCommand()
    {
        // Arrange
        var mockCommand = new Mock<IDbCommand>();
        var mockConnection = new Mock<DbConnection>();
        mockConnection.Setup(c => c.CreateCommand()).Returns(mockCommand.Object);
        
        var wrapper = new DatabaseConnectionWrapper(mockConnection.Object);

        // Act
        var result = wrapper.CreateCommand();

        // Assert
        Assert.That(result, Is.EqualTo(mockCommand.Object));
    }

    [Test]
    public void DatabaseConnectionWrapper_CreateWrappedCommand_ShouldReturnWrapper()
    {
        // Arrange
        var mockCommand = new Mock<IDbCommand>();
        var mockConnection = new Mock<DbConnection>();
        mockConnection.Setup(c => c.CreateCommand()).Returns(mockCommand.Object);
        
        var wrapper = new DatabaseConnectionWrapper(mockConnection.Object);

        // Act
        var result = wrapper.CreateWrappedCommand();

        // Assert
        Assert.That(result, Is.InstanceOf<DbCommandWrapper>());
        Assert.That(((DbCommandWrapper)result).GetWrappedCommand(), Is.EqualTo(mockCommand.Object));
    }

    [Test]
    public void DatabaseConnectionWrapper_Dispose_ShouldDisposeConnection()
    {
        // Arrange
        var mockConnection = new Mock<DbConnection>();
        var wrapper = new DatabaseConnectionWrapper(mockConnection.Object);

        // Act
        wrapper.Dispose();

        // Assert
        mockConnection.Verify(c => c.Dispose(), Times.Once);
    }

    [Test]
    public void DatabaseConnectionWrapper_Dispose_ShouldOnlyDisposeOnce()
    {
        // Arrange
        var mockConnection = new Mock<DbConnection>();
        var wrapper = new DatabaseConnectionWrapper(mockConnection.Object);

        // Act
        wrapper.Dispose();
        wrapper.Dispose(); // Second call

        // Assert
        mockConnection.Verify(c => c.Dispose(), Times.Once);
    }

    #endregion

    #region DataReaderWrapper Tests

    [Test]
    public async Task DataReaderWrapper_ReadAsync_ShouldCallUnderlyingReader()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        mockReader.Setup(r => r.ReadAsync(It.IsAny<CancellationToken>()))
            .ReturnsAsync(true);
        
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        var result = await wrapper.ReadAsync();

        // Assert
        Assert.That(result, Is.True);
        mockReader.Verify(r => r.ReadAsync(It.IsAny<CancellationToken>()), Times.Once);
    }

    [Test]
    public void DataReaderWrapper_Indexer_ShouldReturnValue()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        mockReader.Setup(r => r["test"]).Returns("value");
        
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        var result = wrapper["test"];

        // Assert
        Assert.That(result, Is.EqualTo("value"));
    }

    [Test]
    public void DataReaderWrapper_GetOrdinal_ShouldReturnPosition()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        mockReader.Setup(r => r.GetOrdinal("name")).Returns(1);
        
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        var result = wrapper.GetOrdinal("name");

        // Assert
        Assert.That(result, Is.EqualTo(1));
    }

    [Test]
    public void DataReaderWrapper_GetFieldValue_ShouldReturnTypedValue()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        mockReader.Setup(r => r.GetFieldValue<int>(0)).Returns(42);
        
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        var result = wrapper.GetFieldValue<int>(0);

        // Assert
        Assert.That(result, Is.EqualTo(42));
    }

    [Test]
    public void DataReaderWrapper_IsDBNull_ShouldReturnStatus()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        mockReader.Setup(r => r.IsDBNull(0)).Returns(true);
        
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        var result = wrapper.IsDBNull(0);

        // Assert
        Assert.That(result, Is.True);
    }

    [Test]
    public void DataReaderWrapper_Dispose_ShouldDisposeReader()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        wrapper.Dispose();

        // Assert
        mockReader.Verify(r => r.Dispose(), Times.Once);
    }

    [Test]
    public void DataReaderWrapper_Dispose_ShouldOnlyDisposeOnce()
    {
        // Arrange
        var mockReader = new Mock<DbDataReader>();
        var wrapper = new DataReaderWrapper(mockReader.Object);

        // Act
        wrapper.Dispose();
        wrapper.Dispose(); // Second call

        // Assert
        mockReader.Verify(r => r.Dispose(), Times.Once);
    }

    #endregion
}

// Helper class needed for DbCommandWrapper test
public class DbCommandWrapper : IDbCommandWrapper
{
    private readonly IDbCommand _command;
    
    public DbCommandWrapper(IDbCommand command)
    {
        _command = command;
    }
    
    public IDbCommand GetWrappedCommand() => _command;
    
    // Implement other IDbCommandWrapper members...
}
